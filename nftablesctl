#!/bin/sh

set -e
type nft > /dev/null

if [ ! -d /etc/nftables ]
then
	echo "Rules directory /etc/nftables does not exist" >&2
	exit 1
fi

usage() {
	echo "USAGE: $0 start|start_noconfirm|stop|restart|restart_noconfirm|list"
}

ctrl_c() {
	echo
	echo "nftables rules successfully applied"
	exit 0
}

nft_clear_table() {
	nft flush table $1 $2
	nft list table $1 $2 | awk '/^[ \t]+chain/{ print $2 }' | xargs -r -L 1 nft delete chain $1 $2
}

nft_delete_table() {
	nft_clear_table $1 $2
	if nft list table $1 $2 > /dev/null
	then
		nft delete table $1 $2
	fi
}

nft_clear_protocol() {
	for T in $(nft list tables $1 | cut -d ' ' -f 2)
	do
		nft_delete_table $1 $T
	done
}

nft_list_protocol() {
	for T in $(nft list tables $1 | cut -d ' ' -f 2)
	do
		nft list table $1 $T
	done
}

nftables_start() {
	find /etc/nftables -maxdepth 1 -type f -name '*.rules' -print0 | \
		sort -z | xargs --null --no-run-if-empty --max-args=1 nft -f

	if [ -t 0 ]
	then
		echo "Please confirm that your network connection is working and press Ctrl+C on success"
		trap ctrl_c INT

		sleep 20

		echo "No response, flushing rules"
		nftables_stop
	fi
}

# Use this if you don't want the safety provided by nftables_start()
nftables_start_noconfirm() {
	find /etc/nftables -maxdepth 1 -type f -name '*.rules' -print0 | \
		sort -z | xargs --null --no-run-if-empty --max-args=1 nft -f
}


nftables_list() {
	for P in ip ip6 arp bridge
	do
		nft_list_protocol $P
	done
}

nftables_stop() {
	for P in ip ip6 arp bridge
	do
		nft_clear_protocol $P
	done
}

nftables_restart() {
	nftables_stop
	nftables_start
}

nftables_restart_noconfirm() {
	nftables_stop
	nftables_start_noconfirm
}

case $1 in
	start)
		nftables_start
		;;

	start_nocheck)
		nftables_start_noconfirm
		;;

	stop)
		nftables_stop
		;;

	restart)
		nftables_restart
		;;

	restart_noconfirm)
		nftables_restart_noconfirm
		;;

	list)
		nftables_list
		;;

	*)
		usage
		exit 1
		;;
esac
